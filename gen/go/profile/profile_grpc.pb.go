// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: profile/profile.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Profiles_CreateOwnProfile_FullMethodName         = "/profile.Profiles/CreateOwnProfile"
	Profiles_GetOwnProfile_FullMethodName            = "/profile.Profiles/GetOwnProfile"
	Profiles_GetProfileById_FullMethodName           = "/profile.Profiles/GetProfileById"
	Profiles_GetProfileByUsername_FullMethodName     = "/profile.Profiles/GetProfileByUsername"
	Profiles_SearchProfilesByUsername_FullMethodName = "/profile.Profiles/SearchProfilesByUsername"
	Profiles_UpdateOwnProfile_FullMethodName         = "/profile.Profiles/UpdateOwnProfile"
	Profiles_UpdateOwnUsername_FullMethodName        = "/profile.Profiles/UpdateOwnUsername"
	Profiles_ResetProfileByAdmin_FullMethodName      = "/profile.Profiles/ResetProfileByAdmin"
	Profiles_ResetUsernameByAdmin_FullMethodName     = "/profile.Profiles/ResetUsernameByAdmin"
	Profiles_UpdateOfficialByAdmin_FullMethodName    = "/profile.Profiles/UpdateOfficialByAdmin"
)

// ProfilesClient is the client API for Profiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilesClient interface {
	CreateOwnProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	GetOwnProfile(ctx context.Context, in *GetOwnProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	GetProfileById(ctx context.Context, in *GetProfileByIdRequest, opts ...grpc.CallOption) (*Profile, error)
	GetProfileByUsername(ctx context.Context, in *GetProfileByUsernameRequest, opts ...grpc.CallOption) (*Profile, error)
	SearchProfilesByUsername(ctx context.Context, in *SearchProfilesByUsernameRequest, opts ...grpc.CallOption) (*ProfilesList, error)
	UpdateOwnProfile(ctx context.Context, in *UpdateOwnProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	UpdateOwnUsername(ctx context.Context, in *UpdateOwnUsernameRequest, opts ...grpc.CallOption) (*Profile, error)
	// Admin panel
	ResetProfileByAdmin(ctx context.Context, in *ResetProfileByAdminRequest, opts ...grpc.CallOption) (*Profile, error)
	ResetUsernameByAdmin(ctx context.Context, in *ResetUsernameByAdminRequest, opts ...grpc.CallOption) (*Profile, error)
	UpdateOfficialByAdmin(ctx context.Context, in *UpdateOfficialByAdminRequest, opts ...grpc.CallOption) (*Profile, error)
}

type profilesClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesClient(cc grpc.ClientConnInterface) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) CreateOwnProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_CreateOwnProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetOwnProfile(ctx context.Context, in *GetOwnProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_GetOwnProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetProfileById(ctx context.Context, in *GetProfileByIdRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_GetProfileById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetProfileByUsername(ctx context.Context, in *GetProfileByUsernameRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_GetProfileByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) SearchProfilesByUsername(ctx context.Context, in *SearchProfilesByUsernameRequest, opts ...grpc.CallOption) (*ProfilesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfilesList)
	err := c.cc.Invoke(ctx, Profiles_SearchProfilesByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) UpdateOwnProfile(ctx context.Context, in *UpdateOwnProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_UpdateOwnProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) UpdateOwnUsername(ctx context.Context, in *UpdateOwnUsernameRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_UpdateOwnUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) ResetProfileByAdmin(ctx context.Context, in *ResetProfileByAdminRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_ResetProfileByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) ResetUsernameByAdmin(ctx context.Context, in *ResetUsernameByAdminRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_ResetUsernameByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) UpdateOfficialByAdmin(ctx context.Context, in *UpdateOfficialByAdminRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Profiles_UpdateOfficialByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServer is the server API for Profiles service.
// All implementations must embed UnimplementedProfilesServer
// for forward compatibility.
type ProfilesServer interface {
	CreateOwnProfile(context.Context, *CreateProfileRequest) (*Profile, error)
	GetOwnProfile(context.Context, *GetOwnProfileRequest) (*Profile, error)
	GetProfileById(context.Context, *GetProfileByIdRequest) (*Profile, error)
	GetProfileByUsername(context.Context, *GetProfileByUsernameRequest) (*Profile, error)
	SearchProfilesByUsername(context.Context, *SearchProfilesByUsernameRequest) (*ProfilesList, error)
	UpdateOwnProfile(context.Context, *UpdateOwnProfileRequest) (*Profile, error)
	UpdateOwnUsername(context.Context, *UpdateOwnUsernameRequest) (*Profile, error)
	// Admin panel
	ResetProfileByAdmin(context.Context, *ResetProfileByAdminRequest) (*Profile, error)
	ResetUsernameByAdmin(context.Context, *ResetUsernameByAdminRequest) (*Profile, error)
	UpdateOfficialByAdmin(context.Context, *UpdateOfficialByAdminRequest) (*Profile, error)
	mustEmbedUnimplementedProfilesServer()
}

// UnimplementedProfilesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfilesServer struct{}

func (UnimplementedProfilesServer) CreateOwnProfile(context.Context, *CreateProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOwnProfile not implemented")
}
func (UnimplementedProfilesServer) GetOwnProfile(context.Context, *GetOwnProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnProfile not implemented")
}
func (UnimplementedProfilesServer) GetProfileById(context.Context, *GetProfileByIdRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileById not implemented")
}
func (UnimplementedProfilesServer) GetProfileByUsername(context.Context, *GetProfileByUsernameRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByUsername not implemented")
}
func (UnimplementedProfilesServer) SearchProfilesByUsername(context.Context, *SearchProfilesByUsernameRequest) (*ProfilesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProfilesByUsername not implemented")
}
func (UnimplementedProfilesServer) UpdateOwnProfile(context.Context, *UpdateOwnProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnProfile not implemented")
}
func (UnimplementedProfilesServer) UpdateOwnUsername(context.Context, *UpdateOwnUsernameRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnUsername not implemented")
}
func (UnimplementedProfilesServer) ResetProfileByAdmin(context.Context, *ResetProfileByAdminRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetProfileByAdmin not implemented")
}
func (UnimplementedProfilesServer) ResetUsernameByAdmin(context.Context, *ResetUsernameByAdminRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUsernameByAdmin not implemented")
}
func (UnimplementedProfilesServer) UpdateOfficialByAdmin(context.Context, *UpdateOfficialByAdminRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfficialByAdmin not implemented")
}
func (UnimplementedProfilesServer) mustEmbedUnimplementedProfilesServer() {}
func (UnimplementedProfilesServer) testEmbeddedByValue()                  {}

// UnsafeProfilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilesServer will
// result in compilation errors.
type UnsafeProfilesServer interface {
	mustEmbedUnimplementedProfilesServer()
}

func RegisterProfilesServer(s grpc.ServiceRegistrar, srv ProfilesServer) {
	// If the following call pancis, it indicates UnimplementedProfilesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Profiles_ServiceDesc, srv)
}

func _Profiles_CreateOwnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).CreateOwnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_CreateOwnProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).CreateOwnProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetOwnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetOwnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_GetOwnProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetOwnProfile(ctx, req.(*GetOwnProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetProfileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetProfileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_GetProfileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetProfileById(ctx, req.(*GetProfileByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetProfileByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetProfileByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_GetProfileByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetProfileByUsername(ctx, req.(*GetProfileByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_SearchProfilesByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProfilesByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).SearchProfilesByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_SearchProfilesByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).SearchProfilesByUsername(ctx, req.(*SearchProfilesByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_UpdateOwnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).UpdateOwnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_UpdateOwnProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).UpdateOwnProfile(ctx, req.(*UpdateOwnProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_UpdateOwnUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).UpdateOwnUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_UpdateOwnUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).UpdateOwnUsername(ctx, req.(*UpdateOwnUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_ResetProfileByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetProfileByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).ResetProfileByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_ResetProfileByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).ResetProfileByAdmin(ctx, req.(*ResetProfileByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_ResetUsernameByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUsernameByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).ResetUsernameByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_ResetUsernameByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).ResetUsernameByAdmin(ctx, req.(*ResetUsernameByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_UpdateOfficialByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfficialByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).UpdateOfficialByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_UpdateOfficialByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).UpdateOfficialByAdmin(ctx, req.(*UpdateOfficialByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Profiles_ServiceDesc is the grpc.ServiceDesc for Profiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOwnProfile",
			Handler:    _Profiles_CreateOwnProfile_Handler,
		},
		{
			MethodName: "GetOwnProfile",
			Handler:    _Profiles_GetOwnProfile_Handler,
		},
		{
			MethodName: "GetProfileById",
			Handler:    _Profiles_GetProfileById_Handler,
		},
		{
			MethodName: "GetProfileByUsername",
			Handler:    _Profiles_GetProfileByUsername_Handler,
		},
		{
			MethodName: "SearchProfilesByUsername",
			Handler:    _Profiles_SearchProfilesByUsername_Handler,
		},
		{
			MethodName: "UpdateOwnProfile",
			Handler:    _Profiles_UpdateOwnProfile_Handler,
		},
		{
			MethodName: "UpdateOwnUsername",
			Handler:    _Profiles_UpdateOwnUsername_Handler,
		},
		{
			MethodName: "ResetProfileByAdmin",
			Handler:    _Profiles_ResetProfileByAdmin_Handler,
		},
		{
			MethodName: "ResetUsernameByAdmin",
			Handler:    _Profiles_ResetUsernameByAdmin_Handler,
		},
		{
			MethodName: "UpdateOfficialByAdmin",
			Handler:    _Profiles_UpdateOfficialByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile/profile.proto",
}
