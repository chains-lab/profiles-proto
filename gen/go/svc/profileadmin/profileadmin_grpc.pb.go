// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/profileadmin/profileadmin.proto

package profileadmin

import (
	context "context"
	profile "github.com/chains-lab/profiles-proto/gen/go/svc/profile"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileAdminService_ResetProfile_FullMethodName   = "/profileadmin.ProfileAdminService/ResetProfile"
	ProfileAdminService_ResetUsername_FullMethodName  = "/profileadmin.ProfileAdminService/ResetUsername"
	ProfileAdminService_UpdateOfficial_FullMethodName = "/profileadmin.ProfileAdminService/UpdateOfficial"
)

// ProfileAdminServiceClient is the client API for ProfileAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileAdminServiceClient interface {
	ResetProfile(ctx context.Context, in *ResetProfileRequest, opts ...grpc.CallOption) (*profile.Profile, error)
	ResetUsername(ctx context.Context, in *ResetUsernameRequest, opts ...grpc.CallOption) (*profile.Profile, error)
	UpdateOfficial(ctx context.Context, in *UpdateOfficialRequest, opts ...grpc.CallOption) (*profile.Profile, error)
}

type profileAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileAdminServiceClient(cc grpc.ClientConnInterface) ProfileAdminServiceClient {
	return &profileAdminServiceClient{cc}
}

func (c *profileAdminServiceClient) ResetProfile(ctx context.Context, in *ResetProfileRequest, opts ...grpc.CallOption) (*profile.Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(profile.Profile)
	err := c.cc.Invoke(ctx, ProfileAdminService_ResetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileAdminServiceClient) ResetUsername(ctx context.Context, in *ResetUsernameRequest, opts ...grpc.CallOption) (*profile.Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(profile.Profile)
	err := c.cc.Invoke(ctx, ProfileAdminService_ResetUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileAdminServiceClient) UpdateOfficial(ctx context.Context, in *UpdateOfficialRequest, opts ...grpc.CallOption) (*profile.Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(profile.Profile)
	err := c.cc.Invoke(ctx, ProfileAdminService_UpdateOfficial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileAdminServiceServer is the server API for ProfileAdminService service.
// All implementations must embed UnimplementedProfileAdminServiceServer
// for forward compatibility.
type ProfileAdminServiceServer interface {
	ResetProfile(context.Context, *ResetProfileRequest) (*profile.Profile, error)
	ResetUsername(context.Context, *ResetUsernameRequest) (*profile.Profile, error)
	UpdateOfficial(context.Context, *UpdateOfficialRequest) (*profile.Profile, error)
	mustEmbedUnimplementedProfileAdminServiceServer()
}

// UnimplementedProfileAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileAdminServiceServer struct{}

func (UnimplementedProfileAdminServiceServer) ResetProfile(context.Context, *ResetProfileRequest) (*profile.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetProfile not implemented")
}
func (UnimplementedProfileAdminServiceServer) ResetUsername(context.Context, *ResetUsernameRequest) (*profile.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUsername not implemented")
}
func (UnimplementedProfileAdminServiceServer) UpdateOfficial(context.Context, *UpdateOfficialRequest) (*profile.Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfficial not implemented")
}
func (UnimplementedProfileAdminServiceServer) mustEmbedUnimplementedProfileAdminServiceServer() {}
func (UnimplementedProfileAdminServiceServer) testEmbeddedByValue()                             {}

// UnsafeProfileAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileAdminServiceServer will
// result in compilation errors.
type UnsafeProfileAdminServiceServer interface {
	mustEmbedUnimplementedProfileAdminServiceServer()
}

func RegisterProfileAdminServiceServer(s grpc.ServiceRegistrar, srv ProfileAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileAdminService_ServiceDesc, srv)
}

func _ProfileAdminService_ResetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileAdminServiceServer).ResetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileAdminService_ResetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileAdminServiceServer).ResetProfile(ctx, req.(*ResetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileAdminService_ResetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileAdminServiceServer).ResetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileAdminService_ResetUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileAdminServiceServer).ResetUsername(ctx, req.(*ResetUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileAdminService_UpdateOfficial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfficialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileAdminServiceServer).UpdateOfficial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileAdminService_UpdateOfficial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileAdminServiceServer).UpdateOfficial(ctx, req.(*UpdateOfficialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileAdminService_ServiceDesc is the grpc.ServiceDesc for ProfileAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profileadmin.ProfileAdminService",
	HandlerType: (*ProfileAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetProfile",
			Handler:    _ProfileAdminService_ResetProfile_Handler,
		},
		{
			MethodName: "ResetUsername",
			Handler:    _ProfileAdminService_ResetUsername_Handler,
		},
		{
			MethodName: "UpdateOfficial",
			Handler:    _ProfileAdminService_UpdateOfficial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/profileadmin/profileadmin.proto",
}
